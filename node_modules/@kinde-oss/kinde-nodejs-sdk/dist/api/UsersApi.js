"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateUserRequest = _interopRequireDefault(require("../model/CreateUserRequest"));
var _CreateUserResponse = _interopRequireDefault(require("../model/CreateUserResponse"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _SuccessResponse = _interopRequireDefault(require("../model/SuccessResponse"));
var _UpdateUserRequest = _interopRequireDefault(require("../model/UpdateUserRequest"));
var _User = _interopRequireDefault(require("../model/User"));
var _UsersResponse = _interopRequireDefault(require("../model/UsersResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Kinde Management API
                                                                                                                                                                                                                                                                                                                                                                                               * Provides endpoints to manage your Kinde Businesses
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 1
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: support@kinde.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Users service.
* @module api/UsersApi
* @version 1
*/
var UsersApi = /*#__PURE__*/function () {
  /**
  * Constructs a new UsersApi. 
  * @alias module:api/UsersApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function UsersApi(apiClient) {
    _classCallCheck(this, UsersApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the createUser operation.
   * @callback module:api/UsersApi~createUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CreateUserResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create User
   * Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user. 
   * @param {Object} opts Optional parameters
   * @param {module:model/CreateUserRequest} opts.createUserRequest The details of the user to create.
   * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CreateUserResponse}
   */
  _createClass(UsersApi, [{
    key: "createUser",
    value: function createUser(opts, callback) {
      opts = opts || {};
      var postBody = opts['createUserRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['kindeBearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/json; charset=utf-8'];
      var returnType = _CreateUserResponse["default"];
      return this.apiClient.callApi('/api/v1/user', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * Delete a user record. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The user's id.
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
  }, {
    key: "deleteUser",
    value: function deleteUser(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': opts['id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['kindeBearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/json; charset=utf-8'];
      var returnType = _SuccessResponse["default"];
      return this.apiClient.callApi('/api/v1/user', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getUserData operation.
     * @callback module:api/UsersApi~getUserDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * Retrieve a user record. 
     * @param {String} id The user's id.
     * @param {module:api/UsersApi~getUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
  }, {
    key: "getUserData",
    value: function getUserData(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserData");
      }
      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['kindeBearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/json; charset=utf-8'];
      var returnType = _User["default"];
      return this.apiClient.callApi('/api/v1/user', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/UsersApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Field and order to sort the result by.
     * @param {Number} opts.pageSize Number of results per page. Defaults to 10 if parameter not sent.
     * @param {String} opts.userId ID of the user to filter by.
     * @param {String} opts.nextToken A string to get the next page of results if there are more results.
     * @param {String} opts.email Filter the results by email address. The query string should be comma separated and url encoded.
     * @param {module:api/UsersApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersResponse}
     */
  }, {
    key: "getUsers",
    value: function getUsers(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'sort': opts['sort'],
        'page_size': opts['pageSize'],
        'user_id': opts['userId'],
        'next_token': opts['nextToken'],
        'email': opts['email']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['kindeBearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/json; charset=utf-8'];
      var returnType = _UsersResponse["default"];
      return this.apiClient.callApi('/api/v1/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * Update a user record. 
     * @param {module:model/UpdateUserRequest} updateUserRequest The user to update.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The user's id.
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
  }, {
    key: "updateUser",
    value: function updateUser(updateUserRequest, opts, callback) {
      opts = opts || {};
      var postBody = updateUserRequest;
      // verify the required parameter 'updateUserRequest' is set
      if (updateUserRequest === undefined || updateUserRequest === null) {
        throw new Error("Missing the required parameter 'updateUserRequest' when calling updateUser");
      }
      var pathParams = {};
      var queryParams = {
        'id': opts['id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['kindeBearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/json; charset=utf-8'];
      var returnType = _User["default"];
      return this.apiClient.callApi('/api/v1/user', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return UsersApi;
}();
exports["default"] = UsersApi;